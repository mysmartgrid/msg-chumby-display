class XmlParse{	// Constants:	public static var CLASS_REF = XmlParse;	var werte:Array = new Array(96);	var zeitwerte:Array = new Array(96);	var value_reading;	var value_timestamp;	var timeXML:XML;	var timeDayXML:XML;	var boundXML:XML;	var baseURL:String = "http://localhost:3000";	var _high:Number;	var _middle:Number;	var _low:Number;	public function XmlParse()	{		// last value reader		timeXML = new XML();		timeXML.ignoreWhite = true;		// day reader		timeDayXML = new XML();		timeDayXML.ignoreWhite = true;		// boundary reader		boundXML = new XML();		boundXML.ignoreWhite = true;		boundXML.load(baseURL + "/boundary_values");	}	public function loadXML()	{		var dhelp:Date = new Date();		timeXML.load(baseURL + "/last_reading?cachebuster=" + dhelp.getTime());	}	public function loadDayXML()	{		var dhelp:Date = new Date();		timeDayXML.load(baseURL + "/last_day?cachebuster=" + dhelp.getTime());	}	public function setBoundarys(bSuccess:Boolean)	{		if (bSuccess)		{			try			{				// Iterate top level				for (var i = 0; i < boundXML.childNodes.length; i++)				{					var inode = boundXML.childNodes[i];					if (inode.nodeName == "consumption")					{						// Evaluate current time. 						for (var j = 0; j < inode.childNodes.length; j++)						{							var jnode = inode.childNodes[j];							if (jnode.nodeName == "low")							{								_low = parseInt(jnode.childNodes);							}							if (jnode.nodeName == "mid")							{								_middle = parseInt(jnode.childNodes);							}							if (jnode.nodeName == "high")							{								_high = parseInt(jnode.childNodes);							}						}					}				}			}			catch (ex)			{				trace(ex.name + ":" + ex.message + ":" + ex.at + ":" + ex.text);			}		}	}	public function parseXML(success:Boolean)	{		if (success)		{			try			{				trace('got xml document: ' + timeXML);				// Iterate top level				for (var i = 0; i < timeXML.childNodes.length; i++)				{					var inode = timeXML.childNodes[i];					if (inode.nodeName == "current_reading")					{						// Evaluate current reading. 						for (var k = 0; k < inode.childNodes.length; k++)						{							var knode = inode.childNodes[k];							trace("Checking knode " + knode.nodeName);							if (knode.nodeName == "reading")							{								// Evaluate current time. 								for (var j = 0; j < knode.childNodes.length; j++)								{									var jnode = knode.childNodes[j];									trace("checking" + jnode.nodeName);									if (jnode.nodeName == "time")									{										value_timestamp = jnode.childNodes;									}									if (jnode.nodeName == "value")									{										value_reading = jnode.childNodes;									}								}							}						}					}				}			}			catch (ex)			{				trace(ex.name + ":" + ex.message + ":" + ex.at + ":" + ex.text);			}		}		else		{			trace('There is an error with the data.');		}	}	public function fetchLastDay()	{		try		{			// Iterate top level			for (var i = 0; i < timeDayXML.childNodes.length; i++)			{				var inode = timeDayXML.childNodes[i];				if (inode.nodeName == "last_day")				{					for (var j = 0; j < inode.childNodes.length; j++)					{						var jnode = inode.childNodes[j];						if (jnode.nodeName == "reading")						{							for (var k = 0; k < jnode.childNodes.length; k++)							{								var knode = jnode.childNodes[k];								if (knode.nodeName == "value")								{									var help = (knode.childNodes);									werte[j] = parseInt(help);								}								if (knode.nodeName == "time")								{									zeitwerte[j] = knode.childNodes;								}							}						}					}				}			}		}		catch (ex)		{			trace(ex.name + ":" + ex.message + ":" + ex.at + ":" + ex.text);		}	}}