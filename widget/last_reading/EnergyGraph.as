class EnergyGraph{var _lowBoundary:Number;var _middleBoundary:Number;var _dataArray;var _maxValue:Number;var _rectangle;var _scaling:Number;var _lastReading:Number;var _leftOffset:Number = 10;var _barWidth:Number = 5;var _baseline:Number = 200;var _maxHeight:Number = 150;	//EnergyGraph constructor	public function EnergyGraph(scaling:Number)	{		// Dataarray for the last 60 seconds		_dataArray = new DataArray(60);		// Rectangle object		_rectangle = new rectangle();		//Scaling method		_scaling = scaling;	}		//Draw the graph	public function drawGraph(lastReading:Number)	{		//Get the last reading		_lastReading = lastReading;		//Add last reading to DataArray		_dataArray.addValue(_lastReading);				//clear rootmovieclip		_root.clear();				//draw the bars for each datapoint		for (var i:Number = 0; i < 60; i++){			drawRectangle(_root, calculateBarColor(_dataArray.dataArray[i]), calculateBarHeight(_dataArray.dataArray[i]), i);		}				//draw the top line above the bars		drawTopLine();				//draw boundary lines		//drawBoundaries();	}		function drawBoundaries()	{		if (_lowBoundary < _dataArray.max())		{			_root.lineStyle(2,0x00ff00,80);			_root.moveTo(_leftOffset, _baseline - calculateBarHeight(_lowBoundary));			_root.lineTo(310, _baseline - calculateBarHeight(_lowBoundary));			_root.lineStyle(2,0x000000,0);		}				if (_middleBoundary < _dataArray.max())		{			_root.lineStyle(2,0xffff00,80);			_root.moveTo(_leftOffset, _baseline - calculateBarHeight(_middleBoundary));			_root.lineTo(310, _baseline - calculateBarHeight(_middleBoundary));			_root.lineStyle(2,0x000000,0);		}	}		function drawTopLine()	{		//linecolor		_root.lineStyle(2,0x000000,100);		//startpoint		_root.moveTo(_leftOffset, _baseline - calculateBarHeight(_dataArray.dataArray[0]) );				//dataArray		for (var i:Number = 0; i < 60; i++){						_root.lineTo(_leftOffset + i*_barWidth, _baseline - calculateBarHeight(_dataArray.dataArray[i]));			_root.lineTo(_leftOffset + (i+1)*_barWidth, _baseline - calculateBarHeight(_dataArray.dataArray[i]));		}		//linecolor transparent		_root.lineStyle(0,0x000000,0);	}		function drawRectangle(mc:MovieClip, color:Number, rectangleHeight:Number, index:Number)	{		_rectangle.setColor(color);		_rectangle.setAttributes(_leftOffset + index * _barWidth, _baseline, _barWidth, rectangleHeight, 0, 0);		_rectangle.drawRectangle(mc);	}		function calculateBarHeight(energy:Number):Number	{		//normal 		if (_scaling == 0)			return _maxHeight * ( energy / _dataArray.max() );				//logarithmic		if (_scaling == 1)		{			if (energy == 0)				return 0;			else				return _maxHeight * (Math.log(energy) / Math.log(_dataArray.max()) );		}				//sector		if (_scaling == 2)		{			if (energy <= _lowBoundary)			{				return _maxHeight / 3  * (energy / _lowBoundary);			}						if ((energy > _lowBoundary) && (energy <= _middleBoundary))			{				return _maxHeight / 3 * ( (energy - _lowBoundary) / (_middleBoundary - _lowBoundary) ) + _maxHeight / 3;			}						if (energy > _middleBoundary)			{				return _maxHeight / 3 * ( (energy - _middleBoundary) / (_dataArray.max() - _middleBoundary) ) + (2 * _maxHeight / 3);			}		}			}		function calculateBarColor(energy:Number):Number	{		if (energy < _lowBoundary)			return 0x00ff00;		else {			if (energy < _middleBoundary)				return 0xffff00;			else				return 0xff0000;		}	}}