class DataArray{	var dataArray;	var _numValues;		public function DataArray(numValues:Number)	{		// constructor code		dataArray = new Array(numValues);		_numValues = numValues;		initArray();	}	function initArray()	{		var dal:Number = dataArray.length;				for (var i:Number = 0; i < dal; i++)		{			//trace(i);			dataArray[i] = 0;		}	}	//returns the max value in the data array	function max()	{		var max:Number = 0;		for (var i:Number = 0; i < dataArray.length; i++)		{			if (dataArray[i] > max)			{				max = dataArray[i];			}		}		return max;	}		//returns the min value in the data array	function min()	{		var min:Number = dataArray[0];		for (var i:Number = 1; i < dataArray.length; i++)		{			if (dataArray[i] < min)			{				min = dataArray[i];			}		}		return min;	}		//adds the newest reading to the end of the array	public function addValue(val:Number){		//trace("addValue");		dataArray.reverse();		dataArray.pop();		dataArray.reverse();		//var help = parseInt(value_reading);		dataArray.push(val);	}			public function getDataArray(){		return dataArray;	}		//returns the last (latest) value in the array (current consumption) 	public function getNow():Number{		return dataArray[_numValues - 1];	}		// returns the average of the array	public function average():Number{		var avg:Number = 0;		for(var i:Number = 0; i < _numValues; i++){			avg += dataArray[i];		}		avg = Math.round(avg / _numValues);		return avg;	}		// returns the average of the first "num" values of the array	public function average_number(num:Number):Number{		var avg:Number = 0;		for(var i:Number = 0; i <num; i++){			avg += dataArray[i];		}		avg = Math.round(avg / num);		return avg;	}		// returns the average of the "num" values starting from "from"	public function average_from_to(from:Number, num:Number):Number{		var avg:Number = 0;		var help:Number = from + num;		for(var i:Number = from; i < (help); i++){			avg += dataArray[i];		}		avg = Math.round(avg / num);		return avg;	}		// returns if the last (latest) value is ( x <="low"), (low< x < middle), (x > middle) 	// as Number 1, 2, 3 	public function getMeasure(low:Number,middle:Number,high:Number):Number{		var help = this.getNow();		if(help > middle){			return 3;		} else if (help < middle && help > low ){			return 2;		} else {			return 1;		}	}}